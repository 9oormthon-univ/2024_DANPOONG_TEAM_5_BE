name: Java CI with Gradle

# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.
on:
  push:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  docker-compose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # 1. Java 21 세팅
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      ## create application-database.yaml
      - name: create application.properties file
        run: |
          mkdir ./src/main/resources
          touch ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_YML }}" >> src/main/resources/application.yml

      ## create firebase-service-key.json
      - name: create firebase_service_key.json file
        run: |
          mkdir ./src/main/resources/firebase
          touch ./src/main/resources/firebase/firebase_service_key.json
          echo "${{ secrets.FIREBASE_SERVICE_KEY }}" > src/main/resources/firebase/firebase_service_key.json

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/jangburich2 .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/jangburich2

  run-docker-image-on-ec2:
    needs: docker-compose
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/jangburich2:latest

      # 2. 기존의 컨테이너를 중지시킵니다
      - name: Stop existing Docker containers if running
        run: |
          cd ~/app  # docker-compose.yml 파일이 있는 디렉토리로 이동
          if sudo docker ps -q | grep .; then
            sudo docker-compose down
          else
            echo "No running containers to stop."
          fi

      # 3. docker-compose 실행
      - name: Restart services with docker-compose
        run: |
          cd ~/app
          sudo docker-compose up -d --build

      # 4. 사용하지 않는 이미지 제거
      - name: Remove unused Docker images
        run: sudo docker image prune -f